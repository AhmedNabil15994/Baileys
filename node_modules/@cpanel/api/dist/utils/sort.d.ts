/**
 * Sorting direction. The SortType and SortDirection combine to define the sorting for collections returned.
 */
export declare enum SortDirection {
    /**
     * Records are sorted from low value to high value based on the SortType
     */
    Ascending = 0,
    /**
     * Records are sorted from high value to low value based on the SortType
     */
    Descending = 1
}
/**
 * Sorting type. Defines how values are compared.
 */
export declare enum SortType {
    /**
     * Uses character-by-character comparison.
     */
    Lexicographic = 0,
    /**
     * Special rule for handing IPv4 comparison. This takes into account the segments.
     */
    Ipv4 = 1,
    /**
     * Assumes the values are numeric and compares them using number rules.
     */
    Numeric = 2,
    /**
     * Special rule for certain data where 0 is considered unlimited.
     */
    NumericZeroAsMax = 3
}
/**
 * Sort interface
 */
export interface ISort {
    /**
     * Column name to sort on.
     */
    column: string;
    /**
     * Direction to apply to sort: ascending or descending
     */
    direction: SortDirection;
    /**
     * Sort type applied. See SortType for information on available sorting rules.
     */
    type: SortType;
}
/**
 * Defines a sort rule. These can be combined into a list to define a complex sort for a list dataset.
 */
export declare class Sort implements ISort {
    /**
     * Column name to sort on.
     */
    column: string;
    /**
     * Direction to apply to sort: ascending or descending
     */
    direction: SortDirection;
    /**
     * Sort type applied. See SortType for information on available sorting rules.
     */
    type: SortType;
    /**
     * Create a new instance of a Sort
     *
     * @param column Column to sort
     * @param direction Optional sort direction. Defaults to Ascending
     * @param type Optional sort type. Defaults to Lexicographic
     */
    constructor(column: string, direction?: SortDirection, type?: SortType);
}
