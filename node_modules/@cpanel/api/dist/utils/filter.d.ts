/**
 * The filter operator defines the rule used to compare data in a column with the passed-in value. It
 * behaves something like:
 *
 *   const value = 1;
 *   data.map(item => item[column])
 *       .filter(itemValue => operator(itemValue, value));
 *
 * where item is the data from the column
 */
export declare enum FilterOperator {
    /**
     * String contains value
     */
    Contains = 0,
    /**
     * String begins with value
     */
    Begins = 1,
    /**
     * String ends with value
     */
    Ends = 2,
    /**
     * String matches pattern in value
     */
    Matches = 3,
    /**
     * Column value equals value
     */
    Equal = 4,
    /**
     * Column value not equal value
     */
    NotEqual = 5,
    /**
     * Column value is less than value
     */
    LessThan = 6,
    /**
     * Column value is less than value using unlimited rules.
     */
    LessThanUnlimited = 7,
    /**
     * Column value is greater than value.
     */
    GreaterThan = 8,
    /**
     * Column value is greater than value using unlimited rules.
     */
    GreaterThanUnlimited = 9,
    /**
     * Column value is defined. Value is ignored in this case.
     */
    Defined = 10,
    /**
     * Column value is undefined. Value is ignored in this case.
     */
    Undefined = 11
}
/**
 * Interface for filter data.
 */
export interface IFilter {
    /**
     * Column name to look at in a record.
     */
    column: string;
    /**
     * Comparison operator to apply
     */
    operator: FilterOperator;
    /**
     * Value to compare the column data to. The kinds of values here vary depending on the FilterOperator
     */
    value: any;
}
/**
 * Defines a filter request for a Api call.
 */
export declare class Filter implements IFilter {
    /**
     * Column name to look at in a record.
     */
    column: string;
    /**
     * Comparison operator to apply
     */
    operator: FilterOperator;
    /**
     * Value to compare the column data to. The kinds of values here vary depending on the FilterOperator
     */
    value: any;
    /**
     * Construct a new Filter object.
     *
     * @param column Column name requests. Must be non-empty and exist on the related backend collection.
     * @param operator Comparison operator to use when applying the filter.
     * @param value Value to compare the columns value too.
     */
    constructor(column: string, operator: FilterOperator, value: any);
}
